
            # PANDAS


# pandas --> data cleaning

# csv --> comma separated values



#  DATA FRAME


"""
import pandas as pd
a={
    "name":"sesan",
    "dept":"mca",
    "age":"22",
    "gender":"male"
}
result=pd.DataFrame(a)
print(result)

""" 


"""
import pandas as pd

data={
    "cars":["bmw","audi","tata","mahendira"],
    "ranks":[5,6,2,3]
}
x=pd.DataFrame(data)
print(x)
"""




#  SERIES


#import pandas as pd

"""
a = [1,3,5,6,4,6]
y=pd.Series(a)
print(y)
"""

# output

# 0    1
# 1    3
# 2    5
# 3    6
# 4    4
# 5    6
# dtype: int64


"""
a = [1,3,5,'sesan',4,'kavin']
y=pd.Series(a)
print(y)
"""


#output

# 0        1
# 1        3
# 2        5
# 3    sesan
# 4        4
# 5    kavin
# dtype: object


# indexing

"""
a = [1,3,5,'sesan',4,'kavin']
y=pd.Series(a)
print(y[2])
"""

# output
# 5



# to assign a own index values:
    
"""    
a = [1,3,5,7,4,8]
y=pd.Series(a,index=["x","y","z","a","b","c"])
print(y)
"""

# output

# x    1
# y    3
# z    5
# a    7
# b    4
# c    8
# dtype: int64


"""
a = [1,3,5,7,4,8]
y=pd.Series(a,index=["x","y","z",1,2,7])
print(y)
"""


# output

# x    1
# y    3
# z    5
# 1    7
# 2    4
# 7    8
# dtype: int64



"""
a = [1,3,5,7,4,8]
y=pd.Series(a,index=["x","y","z",1,2,7])
print(y["z"])
"""


# output
# 5




# use dictionaries in series


#import pandas as pd


"""
calories ={
    "day1": 420,
    "day2": 450,
    "day4": 900
    }

y=pd.Series(calories)
print(y)

"""


# output

# day1    420
# day2    450
# day4    900
# dtype: int64


# float 64 --> type

"""
calories ={
    "day1": 420,
    "day2": 450,
    "day4": 900
    }

y=pd.Series(calories,index=["a","b","c"])
print(y)

"""

# output

# a   NaN
# b   NaN
# c   NaN
# dtype: float64




# here security is advantage:
    
"""
calories ={
    "day1": 420,
    "day2": 450,
    "day4": 900
    }

y=pd.Series(calories,index=["day1"])
print(y)
"""


# output
# day1    420
# dtype: int64


"""
calories ={
    "day1": 420,
    "day2": 450,
    "day4": 900
    }

y=pd.Series(calories,index=["day4"])
print(y)
"""

# output

# day4    900
# dtype: int64




# -----------------------------------------------------------------------


# pandas DataFrame()


# how to use \
# dimenstion --> d (0,1,2,3)


#import pandas as pd

"""
data={
     "calories":[440,890,230],
     "duration":[10,40,70]
     
 }

df = pd.DataFrame(data)
print(df)
"""

#output

#    calories  duration
# 0       440        10
# 1       890        40
# 2       230        70



# locate ---> loc()

#df.loc()

"""
data={
     "calories":[440,890,230],
     "duration":[10,40,70]
     
 }

df = pd.DataFrame(data)
print(df.loc[0])
"""


# output

# calories    440
# duration     10
# Name: 0, dtype: int64

# -------------------------****************************----------------------

"""
data={
     "calories":[440,890,230],
     "duration":[10,40,70]
     
 }

df = pd.DataFrame(data)
print(df.loc[1:3])
"""


# output

#    calories  duration
# 1       890        40
# 2       230        70



# ------------------------------- or ----------------------------------------


"""
data={
     "calories":[440,890,230],
     "duration":[10,40,70]
     
 }

df = pd.DataFrame(data)
print(df.loc[[0,2]])
"""


# output

#    calories  duration
# 0       440        10
# 2       230        70



# -------indexing ------------------------


"""
data={
     "calories":[440,890,230],
     "duration":[10,40,70]
     
 }

df = pd.DataFrame(data,index=["day1","day2","day3"])
print(df)
"""

# output

#       calories  duration
# day1       440        10
# day2       890        40
# day3       230        70



"""
data={
     "calories":[440,890,230],
     "duration":[10,40,70]
     
 }

df = pd.DataFrame(data,index=["day1","day2","day3"])
print(df.loc["day1"])
"""


# output

# calories    440
# duration     10
# Name: day1, dtype: int64


"""
data={
     "calories":[440,890,230],
     "duration":[10,40,70]
     
 }

df = pd.DataFrame(data,index=["day1","day2","day3"])
print(df.loc[["day1","day3"]])

"""

# output

#       calories  duration
# day1       440        10
# day3       230        70



#---------------------------------------------------------------------------------



# Reading CSV and JSON files in Pandas



# pandas read csv files


"""
import pandas as pd


df=pd.read_csv("C:/Users/admin/Downloads/data.csv")
print(df)
"""

# output

#      Duration  Pulse  Maxpulse  Calories
# 0          60    110       130     409.1
# 1          60    117       145     479.0
# 2          60    103       135     340.0
# 3          45    109       175     282.4
# 4          45    117       148     406.0
# ..        ...    ...       ...       ...
# 164        60    105       140     290.8
# 165        60    110       145     300.0
# 166        60    115       145     310.2
# 167        75    120       150     320.4
# 168        75    125       150     330.4

# [169 rows x 4 columns]



# to change the datatype into string()


"""
import pandas as pd


df=pd.read_csv("C:/Users/admin/Downloads/data.csv")
print(df.to_string())
"""

# output

#    Duration  Pulse  Maxpulse  Calories
# 0          60    110       130     409.1
# 1          60    117       145     479.0
# 2          60    103       135     340.0
# 3          45    109       175     282.4
# 4          45    117       148     406.0
# 5          60    102       127     300.0
# 6          60    110       136     374.0
# 7          45    104       134     253.3
# 8          30    109       133     195.1
# 9          60     98       124     269.0
# 10         60    103       147     329.3
# 11         60    100       120     250.7
# 12         60    106       128     345.3
# 13         60    104       132     379.3
# 14         60     98       123     275.0
# 15         60     98       120     215.2
# 16         60    100       120     300.0
# 17         45     90       112       NaN
# 18         60    103       123     323.0
# 19         45     97       125     243.0
# 20         60    108       131     364.2
# 21         45    100       119     282.0
# 22         60    130       101     300.0
# 23         45    105       132     246.0
# 24         60    102       126     334.5
# 25         60    100       120     250.0
# 26         60     92       118     241.0
# 27         60    103       132       NaN
# 28         60    100       132     280.0
# 29         60    102       129     380.3
# 30         60     92       115     243.0
# 31         45     90       112     180.1
# 32         60    101       124     299.0
# 33         60     93       113     223.0
# 34         60    107       136     361.0
# 35         60    114       140     415.0
# 36         60    102       127     300.0
# 37         60    100       120     300.0
# 38         60    100       120     300.0
# 39         45    104       129     266.0
# 40         45     90       112     180.1
# 41         60     98       126     286.0
# 42         60    100       122     329.4
# 43         60    111       138     400.0
# 44         60    111       131     397.0
# 45         60     99       119     273.0
# 46         60    109       153     387.6
# 47         45    111       136     300.0
# 48         45    108       129     298.0
# 49         60    111       139     397.6
# 50         60    107       136     380.2
# 51         80    123       146     643.1
# 52         60    106       130     263.0
# 53         60    118       151     486.0
# 54         30    136       175     238.0
# 55         60    121       146     450.7
# 56         60    118       121     413.0
# 57         45    115       144     305.0
# 58         20    153       172     226.4
# 59         45    123       152     321.0
# 60        210    108       160    1376.0
# 61        160    110       137    1034.4
# 62        160    109       135     853.0
# 63         45    118       141     341.0
# 64         20    110       130     131.4
# 65        180     90       130     800.4
# 66        150    105       135     873.4
# 67        150    107       130     816.0
# 68         20    106       136     110.4
# 69        300    108       143    1500.2
# 70        150     97       129    1115.0
# 71         60    109       153     387.6
# 72         90    100       127     700.0
# 73        150     97       127     953.2
# 74         45    114       146     304.0
# 75         90     98       125     563.2
# 76         45    105       134     251.0
# 77         45    110       141     300.0
# 78        120    100       130     500.4
# 79        270    100       131    1729.0
# 80         30    159       182     319.2
# 81         45    149       169     344.0
# 82         30    103       139     151.1
# 83        120    100       130     500.0
# 84         45    100       120     225.3
# 85         30    151       170     300.0
# 86         45    102       136     234.0
# 87        120    100       157    1000.1
# 88         45    129       103     242.0
# 89         20     83       107      50.3
# 90        180    101       127     600.1
# 91         45    107       137       NaN
# 92         30     90       107     105.3
# 93         15     80       100      50.5
# 94         20    150       171     127.4
# 95         20    151       168     229.4
# 96         30     95       128     128.2
# 97         25    152       168     244.2
# 98         30    109       131     188.2
# 99         90     93       124     604.1
# 100        20     95       112      77.7
# 101        90     90       110     500.0
# 102        90     90       100     500.0
# 103        90     90       100     500.4
# 104        30     92       108      92.7
# 105        30     93       128     124.0
# 106       180     90       120     800.3
# 107        30     90       120      86.2
# 108        90     90       120     500.3
# 109       210    137       184    1860.4
# 110        60    102       124     325.2
# 111        45    107       124     275.0
# 112        15    124       139     124.2
# 113        45    100       120     225.3
# 114        60    108       131     367.6
# 115        60    108       151     351.7
# 116        60    116       141     443.0
# 117        60     97       122     277.4
# 118        60    105       125       NaN
# 119        60    103       124     332.7
# 120        30    112       137     193.9
# 121        45    100       120     100.7
# 122        60    119       169     336.7
# 123        60    107       127     344.9
# 124        60    111       151     368.5
# 125        60     98       122     271.0
# 126        60     97       124     275.3
# 127        60    109       127     382.0
# 128        90     99       125     466.4
# 129        60    114       151     384.0
# 130        60    104       134     342.5
# 131        60    107       138     357.5
# 132        60    103       133     335.0
# 133        60    106       132     327.5
# 134        60    103       136     339.0
# 135        20    136       156     189.0
# 136        45    117       143     317.7
# 137        45    115       137     318.0
# 138        45    113       138     308.0
# 139        20    141       162     222.4
# 140        60    108       135     390.0
# 141        60     97       127       NaN
# 142        45    100       120     250.4
# 143        45    122       149     335.4
# 144        60    136       170     470.2
# 145        45    106       126     270.8
# 146        60    107       136     400.0
# 147        60    112       146     361.9
# 148        30    103       127     185.0
# 149        60    110       150     409.4
# 150        60    106       134     343.0
# 151        60    109       129     353.2
# 152        60    109       138     374.0
# 153        30    150       167     275.8
# 154        60    105       128     328.0
# 155        60    111       151     368.5
# 156        60     97       131     270.4
# 157        60    100       120     270.4
# 158        60    114       150     382.8
# 159        30     80       120     240.9
# 160        30     85       120     250.4
# 161        45     90       130     260.4
# 162        45     95       130     270.0
# 163        45    100       140     280.9
# 164        60    105       140     290.8
# 165        60    110       145     300.0
# 166        60    115       145     310.2
# 167        75    120       150     320.4
# 168        75    125       150     330.4





# _________________________________________________________________________________


# pandas read json files 



"""
import pandas as pd

df=pd.read_json("C:/Users/admin/Downloads/opendata.json")
print(df)
"""


# output

#      Duration  Pulse  Maxpulse  Calories
# 0          60    110       130     409.1
# 1          60    117       145     479.0
# 2          60    103       135     340.0
# 3          45    109       175     282.4
# 4          45    117       148     406.0
# ..        ...    ...       ...       ...
# 164        60    105       140     290.8
# 165        60    110       145     300.4
# 166        60    115       145     310.2
# 167        75    120       150     320.4
# 168        75    125       150     330.4

# [169 rows x 4 columns]



"""
import pandas as pd

df=pd.read_json("C:/Users/admin/Downloads/opendata.json")
print(df.to_string())
"""


# output

#      Duration  Pulse  Maxpulse  Calories
# 0          60    110       130     409.1
# 1          60    117       145     479.0
# 2          60    103       135     340.0
# 3          45    109       175     282.4
# 4          45    117       148     406.0
# 5          60    102       127     300.5
# 6          60    110       136     374.0
# 7          45    104       134     253.3
# 8          30    109       133     195.1
# 9          60     98       124     269.0
# 10         60    103       147     329.3
# 11         60    100       120     250.7
# 12         60    106       128     345.3
# 13         60    104       132     379.3
# 14         60     98       123     275.0
# 15         60     98       120     215.2
# 16         60    100       120     300.0
# 17         45     90       112       NaN
# 18         60    103       123     323.0
# 19         45     97       125     243.0
# 20         60    108       131     364.2
# 21         45    100       119     282.0
# 22         60    130       101     300.0
# 23         45    105       132     246.0
# 24         60    102       126     334.5
# 25         60    100       120     250.0
# 26         60     92       118     241.0
# 27         60    103       132       NaN
# 28         60    100       132     280.0
# 29         60    102       129     380.3
# 30         60     92       115     243.0
# 31         45     90       112     180.1
# 32         60    101       124     299.0
# 33         60     93       113     223.0
# 34         60    107       136     361.0
# 35         60    114       140     415.0
# 36         60    102       127     300.5
# 37         60    100       120     300.1
# 38         60    100       120     300.0
# 39         45    104       129     266.0
# 40         45     90       112     180.1
# 41         60     98       126     286.0
# 42         60    100       122     329.4
# 43         60    111       138     400.0
# 44         60    111       131     397.0
# 45         60     99       119     273.0
# 46         60    109       153     387.6
# 47         45    111       136     300.0
# 48         45    108       129     298.0
# 49         60    111       139     397.6
# 50         60    107       136     380.2
# 51         80    123       146     643.1
# 52         60    106       130     263.0
# 53         60    118       151     486.0
# 54         30    136       175     238.0
# 55         60    121       146     450.7
# 56         60    118       121     413.0
# 57         45    115       144     305.0
# 58         20    153       172     226.4
# 59         45    123       152     321.0
# 60        210    108       160    1376.0
# 61        160    110       137    1034.4
# 62        160    109       135     853.0
# 63         45    118       141     341.0
# 64         20    110       130     131.4
# 65        180     90       130     800.4
# 66        150    105       135     873.4
# 67        150    107       130     816.0
# 68         20    106       136     110.4
# 69        300    108       143    1500.2
# 70        150     97       129    1115.0
# 71         60    109       153     387.6
# 72         90    100       127     700.0
# 73        150     97       127     953.2
# 74         45    114       146     304.0
# 75         90     98       125     563.2
# 76         45    105       134     251.0
# 77         45    110       141     300.0
# 78        120    100       130     500.4
# 79        270    100       131    1729.0
# 80         30    159       182     319.2
# 81         45    149       169     344.0
# 82         30    103       139     151.1
# 83        120    100       130     500.0
# 84         45    100       120     225.3
# 85         30    151       170     300.1
# 86         45    102       136     234.0
# 87        120    100       157    1000.1
# 88         45    129       103     242.0
# 89         20     83       107      50.3
# 90        180    101       127     600.1
# 91         45    107       137       NaN
# 92         30     90       107     105.3
# 93         15     80       100      50.5
# 94         20    150       171     127.4
# 95         20    151       168     229.4
# 96         30     95       128     128.2
# 97         25    152       168     244.2
# 98         30    109       131     188.2
# 99         90     93       124     604.1
# 100        20     95       112      77.7
# 101        90     90       110     500.0
# 102        90     90       100     500.0
# 103        90     90       100     500.4
# 104        30     92       108      92.7
# 105        30     93       128     124.0
# 106       180     90       120     800.3
# 107        30     90       120      86.2
# 108        90     90       120     500.3
# 109       210    137       184    1860.4
# 110        60    102       124     325.2
# 111        45    107       124     275.0
# 112        15    124       139     124.2
# 113        45    100       120     225.3
# 114        60    108       131     367.6
# 115        60    108       151     351.7
# 116        60    116       141     443.0
# 117        60     97       122     277.4
# 118        60    105       125       NaN
# 119        60    103       124     332.7
# 120        30    112       137     193.9
# 121        45    100       120     100.7
# 122        60    119       169     336.7
# 123        60    107       127     344.9
# 124        60    111       151     368.5
# 125        60     98       122     271.0
# 126        60     97       124     275.3
# 127        60    109       127     382.0
# 128        90     99       125     466.4
# 129        60    114       151     384.0
# 130        60    104       134     342.5
# 131        60    107       138     357.5
# 132        60    103       133     335.0
# 133        60    106       132     327.5
# 134        60    103       136     339.0
# 135        20    136       156     189.0
# 136        45    117       143     317.7
# 137        45    115       137     318.0
# 138        45    113       138     308.0
# 139        20    141       162     222.4
# 140        60    108       135     390.0
# 141        60     97       127       NaN
# 142        45    100       120     250.4
# 143        45    122       149     335.4
# 144        60    136       170     470.2
# 145        45    106       126     270.8
# 146        60    107       136     400.0
# 147        60    112       146     361.9
# 148        30    103       127     185.0
# 149        60    110       150     409.4
# 150        60    106       134     343.0
# 151        60    109       129     353.2
# 152        60    109       138     374.0
# 153        30    150       167     275.8
# 154        60    105       128     328.0
# 155        60    111       151     368.5
# 156        60     97       131     270.4
# 157        60    100       120     270.4
# 158        60    114       150     382.8
# 159        30     80       120     240.9
# 160        30     85       120     250.4
# 161        45     90       130     260.4
# 162        45     95       130     270.0
# 163        45    100       140     280.9
# 164        60    105       140     290.8
# 165        60    110       145     300.4
# 166        60    115       145     310.2
# 167        75    120       150     320.4
# 168        75    125       150     330.4



#----------------------------------------------------------------------------------------------


# pandas data analysis


# using only particular values!


# head()

"""
import pandas as pd

df=pd.read_csv("C:/Users/admin/Downloads/data.csv")
print(df.head(10))
"""

# output

#    Duration  Pulse  Maxpulse  Calories
# 0        60    110       130     409.1
# 1        60    117       145     479.0
# 2        60    103       135     340.0
# 3        45    109       175     282.4
# 4        45    117       148     406.0
# 5        60    102       127     300.0
# 6        60    110       136     374.0
# 7        45    104       134     253.3
# 8        30    109       133     195.1
# 9        60     98       124     269.0


"""
import pandas as pd

df=pd.read_csv("C:/Users/admin/Downloads/data.csv")
print(df.head(20))
"""


# output

#     Duration  Pulse  Maxpulse  Calories
# 0         60    110       130     409.1
# 1         60    117       145     479.0
# 2         60    103       135     340.0
# 3         45    109       175     282.4
# 4         45    117       148     406.0
# 5         60    102       127     300.0
# 6         60    110       136     374.0
# 7         45    104       134     253.3
# 8         30    109       133     195.1
# 9         60     98       124     269.0
# 10        60    103       147     329.3
# 11        60    100       120     250.7
# 12        60    106       128     345.3
# 13        60    104       132     379.3
# 14        60     98       123     275.0
# 15        60     98       120     215.2
# 16        60    100       120     300.0
# 17        45     90       112       NaN
# 18        60    103       123     323.0
# 19        45     97       125     243.0


# when don't put the values in head ()


"""
import pandas as pd

df=pd.read_csv("C:/Users/admin/Downloads/data.csv")
print(df.head())
"""

# output

#    Duration  Pulse  Maxpulse  Calories
# 0        60    110       130     409.1
# 1        60    117       145     479.0
# 2        60    103       135     340.0
# 3        45    109       175     282.4
# 4        45    117       148     406.0


#---------------------------------------------------------------------------


# using tail() function

# tail() ---> to print the last values
 

"""
import pandas as pd

df=pd.read_csv("C:/Users/admin/Downloads/data.csv")
print(df.tail())
"""

# Output

#      Duration  Pulse  Maxpulse  Calories
# 164        60    105       140     290.8
# 165        60    110       145     300.0
# 166        60    115       145     310.2
# 167        75    120       150     320.4
# 168        75    125       150     330.4


"""
import pandas as pd

df=pd.read_csv("C:/Users/admin/Downloads/data.csv")
print(df.tail(15))
"""

# output

#      Duration  Pulse  Maxpulse  Calories
# 154        60    105       128     328.0
# 155        60    111       151     368.5
# 156        60     97       131     270.4
# 157        60    100       120     270.4
# 158        60    114       150     382.8
# 159        30     80       120     240.9
# 160        30     85       120     250.4
# 161        45     90       130     260.4
# 162        45     95       130     270.0
# 163        45    100       140     280.9
# 164        60    105       140     290.8
# 165        60    110       145     300.0
# 166        60    115       145     310.2
# 167        75    120       150     320.4
# 168        75    125       150     330.4


#---------------------------------------------------------------------------


# information ---> info()

# to know the file details --> use info()

"""
import pandas as pd

df=pd.read_csv("C:/Users/admin/Downloads/data.csv")
print(df.info())
"""

# output

# RangeIndex: 169 entries, 0 to 168
# Data columns (total 4 columns):
#  #   Column    Non-Null Count  Dtype  
# ---  ------    --------------  -----  
#  0   Duration  169 non-null    int64  
#  1   Pulse     169 non-null    int64  
#  2   Maxpulse  169 non-null    int64  
#  3   Calories  164 non-null    float64
# dtypes: float64(1), int64(3)
# memory usage: 5.4 KB
# None


#---------------------------------*************************------------------------------------------------


# Data cleaning using pandas!


# remove empty row

# dropna()


"""
import pandas as pd

df=pd.read_csv("C:/Users/admin/Downloads/datas/dirtydata.csv")
x=df.dropna()
print(x.to_string())
"""

# output

# --> here empty data rows are deleted

#     Duration          Date  Pulse  Maxpulse  Calories
# 0         60  '2020/12/01'    110       130     409.1
# 1         60  '2020/12/02'    117       145     479.0
# 2         60  '2020/12/03'    103       135     340.0
# 3         45  '2020/12/04'    109       175     282.4
# 4         45  '2020/12/05'    117       148     406.0
# 5         60  '2020/12/06'    102       127     300.0
# 6         60  '2020/12/07'    110       136     374.0
# 7        450  '2020/12/08'    104       134     253.3
# 8         30  '2020/12/09'    109       133     195.1
# 9         60  '2020/12/10'     98       124     269.0
# 10        60  '2020/12/11'    103       147     329.3
# 11        60  '2020/12/12'    100       120     250.7
# 12        60  '2020/12/12'    100       120     250.7
# 13        60  '2020/12/13'    106       128     345.3
# 14        60  '2020/12/14'    104       132     379.3
# 15        60  '2020/12/15'     98       123     275.0
# 16        60  '2020/12/16'     98       120     215.2
# 17        60  '2020/12/17'    100       120     300.0
# 19        60  '2020/12/19'    103       123     323.0
# 20        45  '2020/12/20'     97       125     243.0
# 21        60  '2020/12/21'    108       131     364.2
# 23        60  '2020/12/23'    130       101     300.0
# 24        45  '2020/12/24'    105       132     246.0
# 25        60  '2020/12/25'    102       126     334.5
# 26        60      20201226    100       120     250.0
# 27        60  '2020/12/27'     92       118     241.0
# 29        60  '2020/12/29'    100       132     280.0
# 30        60  '2020/12/30'    102       129     380.3
# 31        60  '2020/12/31'     92       115     243.0

#-----------------------------------------------------------------------


# inplace = true

# empty data also presented  ---> not deleted a empty rows

"""
import pandas as pd

df=pd.read_csv("C:/Users/admin/Downloads/datas/dirtydata.csv")
df.dropna(inplace=True)
print(df)
"""

# output

#     Duration          Date  Pulse  Maxpulse  Calories
# 0         60  '2020/12/01'    110       130     409.1
# 1         60  '2020/12/02'    117       145     479.0
# 2         60  '2020/12/03'    103       135     340.0
# 3         45  '2020/12/04'    109       175     282.4
# 4         45  '2020/12/05'    117       148     406.0
# 5         60  '2020/12/06'    102       127     300.0
# 6         60  '2020/12/07'    110       136     374.0
# 7        450  '2020/12/08'    104       134     253.3
# 8         30  '2020/12/09'    109       133     195.1
# 9         60  '2020/12/10'     98       124     269.0
# 10        60  '2020/12/11'    103       147     329.3
# 11        60  '2020/12/12'    100       120     250.7
# 12        60  '2020/12/12'    100       120     250.7
# 13        60  '2020/12/13'    106       128     345.3
# 14        60  '2020/12/14'    104       132     379.3
# 15        60  '2020/12/15'     98       123     275.0
# 16        60  '2020/12/16'     98       120     215.2
# 17        60  '2020/12/17'    100       120     300.0
# 19        60  '2020/12/19'    103       123     323.0
# 20        45  '2020/12/20'     97       125     243.0
# 21        60  '2020/12/21'    108       131     364.2
# 23        60  '2020/12/23'    130       101     300.0
# 24        45  '2020/12/24'    105       132     246.0
# 25        60  '2020/12/25'    102       126     334.5
# 26        60      20201226    100       120     250.0
# 27        60  '2020/12/27'     92       118     241.0
# 29        60  '2020/12/29'    100       132     280.0
# 30        60  '2020/12/30'    102       129     380.3
# 31        60  '2020/12/31'     92       115     243.0




# Replace empty row 

# using ---> fillna()

"""
import pandas as pd

df=pd.read_csv("C:/Users/admin/Downloads/datas/dirtydata.csv")
df.fillna(2000,inplace=True)
print(df)
"""

# output

#     Duration          Date  Pulse  Maxpulse  Calories
# 0         60  '2020/12/01'    110       130     409.1
# 1         60  '2020/12/02'    117       145     479.0
# 2         60  '2020/12/03'    103       135     340.0
# 3         45  '2020/12/04'    109       175     282.4
# 4         45  '2020/12/05'    117       148     406.0
# 5         60  '2020/12/06'    102       127     300.0
# 6         60  '2020/12/07'    110       136     374.0
# 7        450  '2020/12/08'    104       134     253.3
# 8         30  '2020/12/09'    109       133     195.1
# 9         60  '2020/12/10'     98       124     269.0
# 10        60  '2020/12/11'    103       147     329.3
# 11        60  '2020/12/12'    100       120     250.7
# 12        60  '2020/12/12'    100       120     250.7
# 13        60  '2020/12/13'    106       128     345.3
# 14        60  '2020/12/14'    104       132     379.3
# 15        60  '2020/12/15'     98       123     275.0
# 16        60  '2020/12/16'     98       120     215.2
# 17        60  '2020/12/17'    100       120     300.0
# 18        45  '2020/12/18'     90       112    2000.0
# 19        60  '2020/12/19'    103       123     323.0
# 20        45  '2020/12/20'     97       125     243.0
# 21        60  '2020/12/21'    108       131     364.2
# 22        45          2000    100       119     282.0
# 23        60  '2020/12/23'    130       101     300.0
# 24        45  '2020/12/24'    105       132     246.0
# 25        60  '2020/12/25'    102       126     334.5
# 26        60      20201226    100       120     250.0
# 27        60  '2020/12/27'     92       118     241.0
# 28        60  '2020/12/28'    103       132    2000.0
# 29        60  '2020/12/29'    100       132     280.0
# 30        60  '2020/12/30'    102       129     380.3
# 31        60  '2020/12/31'     92       115     243.0



#---------------------------------------------------------------



#------------------********************----------------------------



# replace ---> mean() , median(),  mode()


# mean()   ---> it means average 

# eg:  1+2+3+5+9=20/5=4


"""
import pandas as pd

df=pd.read_csv("C:/Users/admin/Downloads/datas/dirtydata.csv")
x=df.mean()
print(x)
"""

# output

#   x=df.mean()
#     Duration          Date  Pulse  Maxpulse  Calories
# 0         60  '2020/12/01'    110       130     409.1
# 1         60  '2020/12/02'    117       145     479.0
# 2         60  '2020/12/03'    103       135     340.0
# 3         45  '2020/12/04'    109       175     282.4
# 4         45  '2020/12/05'    117       148     406.0
# 5         60  '2020/12/06'    102       127     300.0
# 6         60  '2020/12/07'    110       136     374.0
# 7        450  '2020/12/08'    104       134     253.3
# 8         30  '2020/12/09'    109       133     195.1
# 9         60  '2020/12/10'     98       124     269.0
# 10        60  '2020/12/11'    103       147     329.3
# 11        60  '2020/12/12'    100       120     250.7
# 12        60  '2020/12/12'    100       120     250.7
# 13        60  '2020/12/13'    106       128     345.3
# 14        60  '2020/12/14'    104       132     379.3
# 15        60  '2020/12/15'     98       123     275.0
# 16        60  '2020/12/16'     98       120     215.2
# 17        60  '2020/12/17'    100       120     300.0
# 18        45  '2020/12/18'     90       112    2000.0
# 19        60  '2020/12/19'    103       123     323.0
# 20        45  '2020/12/20'     97       125     243.0
# 21        60  '2020/12/21'    108       131     364.2
# 22        45          2000    100       119     282.0
# 23        60  '2020/12/23'    130       101     300.0
# 24        45  '2020/12/24'    105       132     246.0
# 25        60  '2020/12/25'    102       126     334.5
# 26        60      20201226    100       120     250.0
# 27        60  '2020/12/27'     92       118     241.0
# 28        60  '2020/12/28'    103       132    2000.0
# 29        60  '2020/12/29'    100       132     280.0
# 30        60  '2020/12/30'    102       129     380.3
# 31        60  '2020/12/31'     92       115     243.0
# Duration     68.4375
# Pulse       103.5000
# Maxpulse    128.5000
# Calories    304.6800
# dtype: float64



"""
import pandas as pd

df=pd.read_csv("C:/Users/admin/Downloads/datas/dirtydata.csv")
x=df.mean()
print(x)
df.fillna(x,inplace=True)
print(df)
"""

# output

#     Duration          Date  Pulse  Maxpulse  Calories
# 0         60  '2020/12/01'    110       130    409.10
# 1         60  '2020/12/02'    117       145    479.00
# 2         60  '2020/12/03'    103       135    340.00
# 3         45  '2020/12/04'    109       175    282.40
# 4         45  '2020/12/05'    117       148    406.00
# 5         60  '2020/12/06'    102       127    300.00
# 6         60  '2020/12/07'    110       136    374.00
# 7        450  '2020/12/08'    104       134    253.30
# 8         30  '2020/12/09'    109       133    195.10
# 9         60  '2020/12/10'     98       124    269.00
# 10        60  '2020/12/11'    103       147    329.30
# 11        60  '2020/12/12'    100       120    250.70
# 12        60  '2020/12/12'    100       120    250.70
# 13        60  '2020/12/13'    106       128    345.30
# 14        60  '2020/12/14'    104       132    379.30
# 15        60  '2020/12/15'     98       123    275.00
# 16        60  '2020/12/16'     98       120    215.20
# 17        60  '2020/12/17'    100       120    300.00
# 18        45  '2020/12/18'     90       112    304.68
# 19        60  '2020/12/19'    103       123    323.00
# 20        45  '2020/12/20'     97       125    243.00
# 21        60  '2020/12/21'    108       131    364.20
# 22        45           NaN    100       119    282.00
# 23        60  '2020/12/23'    130       101    300.00
# 24        45  '2020/12/24'    105       132    246.00
# 25        60  '2020/12/25'    102       126    334.50
# 26        60      20201226    100       120    250.00
# 27        60  '2020/12/27'     92       118    241.00
# 28        60  '2020/12/28'    103       132    304.68
# 29        60  '2020/12/29'    100       132    280.00
# 30        60  '2020/12/30'    102       129    380.30
# 31        60  '2020/12/31'     92       115    243.00

"""
import pandas as pd

df=pd.read_csv("C:/Users/admin/Downloads/datas/dirtydata.csv")
x=df.mean()
print(x)
df.fillna(x,inplace=True)
print(df.to_string())
"""


# output

# C:\Users\admin\Desktop\SesanPrograms\python\MODULES\pandas.py:1279: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.
#   x=df.mean()
# Duration     68.4375
# Pulse       103.5000
# Maxpulse    128.5000
# Calories    304.6800
# dtype: float64
#     Duration          Date  Pulse  Maxpulse  Calories
# 0         60  '2020/12/01'    110       130    409.10
# 1         60  '2020/12/02'    117       145    479.00
# 2         60  '2020/12/03'    103       135    340.00
# 3         45  '2020/12/04'    109       175    282.40
# 4         45  '2020/12/05'    117       148    406.00
# 5         60  '2020/12/06'    102       127    300.00
# 6         60  '2020/12/07'    110       136    374.00
# 7        450  '2020/12/08'    104       134    253.30
# 8         30  '2020/12/09'    109       133    195.10
# 9         60  '2020/12/10'     98       124    269.00
# 10        60  '2020/12/11'    103       147    329.30
# 11        60  '2020/12/12'    100       120    250.70
# 12        60  '2020/12/12'    100       120    250.70
# 13        60  '2020/12/13'    106       128    345.30
# 14        60  '2020/12/14'    104       132    379.30
# 15        60  '2020/12/15'     98       123    275.00
# 16        60  '2020/12/16'     98       120    215.20
# 17        60  '2020/12/17'    100       120    300.00
# 18        45  '2020/12/18'     90       112    304.68
# 19        60  '2020/12/19'    103       123    323.00
# 20        45  '2020/12/20'     97       125    243.00
# 21        60  '2020/12/21'    108       131    364.20
# 22        45           NaN    100       119    282.00
# 23        60  '2020/12/23'    130       101    300.00
# 24        45  '2020/12/24'    105       132    246.00
# 25        60  '2020/12/25'    102       126    334.50
# 26        60      20201226    100       120    250.00
# 27        60  '2020/12/27'     92       118    241.00
# 28        60  '2020/12/28'    103       132    304.68
# 29        60  '2020/12/29'    100       132    280.00
# 30        60  '2020/12/30'    102       129    380.30
# 31        60  '2020/12/31'     92       115    243.00



#------------------------------------------------------------------


# median() --> middle value

# eg. 1,2,3,4,5,6,7 ---> 4

# eg, 1,2,3,4,5,6,7,8 ----> 4+5=9/2--->4.5  or 4/5

"""
import pandas as pd

df=pd.read_csv("C:/Users/admin/Downloads/datas/dirtydata.csv")
x=df.median()
print(x)
df.fillna(x,inplace=True)
print(df.to_string())
"""

# output

# C:\Users\admin\Desktop\SesanPrograms\python\MODULES\pandas.py:1344: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.
#   x=df.median()
# Duration     60.0
# Pulse       102.5
# Maxpulse    127.5
# Calories    291.2
# dtype: float64
#     Duration          Date  Pulse  Maxpulse  Calories
# 0         60  '2020/12/01'    110       130     409.1
# 1         60  '2020/12/02'    117       145     479.0
# 2         60  '2020/12/03'    103       135     340.0
# 3         45  '2020/12/04'    109       175     282.4
# 4         45  '2020/12/05'    117       148     406.0
# 5         60  '2020/12/06'    102       127     300.0
# 6         60  '2020/12/07'    110       136     374.0
# 7        450  '2020/12/08'    104       134     253.3
# 8         30  '2020/12/09'    109       133     195.1
# 9         60  '2020/12/10'     98       124     269.0
# 10        60  '2020/12/11'    103       147     329.3
# 11        60  '2020/12/12'    100       120     250.7
# 12        60  '2020/12/12'    100       120     250.7
# 13        60  '2020/12/13'    106       128     345.3
# 14        60  '2020/12/14'    104       132     379.3
# 15        60  '2020/12/15'     98       123     275.0
# 16        60  '2020/12/16'     98       120     215.2
# 17        60  '2020/12/17'    100       120     300.0
# 18        45  '2020/12/18'     90       112     291.2
# 19        60  '2020/12/19'    103       123     323.0
# 20        45  '2020/12/20'     97       125     243.0
# 21        60  '2020/12/21'    108       131     364.2
# 22        45           NaN    100       119     282.0
# 23        60  '2020/12/23'    130       101     300.0
# 24        45  '2020/12/24'    105       132     246.0
# 25        60  '2020/12/25'    102       126     334.5
# 26        60      20201226    100       120     250.0
# 27        60  '2020/12/27'     92       118     241.0
# 28        60  '2020/12/28'    103       132     291.2
# 29        60  '2020/12/29'    100       132     280.0
# 30        60  '2020/12/30'    102       129     380.3
# 31        60  '2020/12/31'     92       115     243.0



#-------------------------------------------------------------------------


# mode() --> 300 places in 3 times so it replaces all values asssign to the 300


# common values ---> mode()
 
# here dates are not valued in mode()

"""
import pandas as pd

df=pd.read_csv("C:/Users/admin/Downloads/datas/dirtydata.csv")
x=df["Calories"].mode()[0]
df["Calories"].fillna(x,inplace=True)
print(df.to_string())
"""


# output

#     Duration          Date  Pulse  Maxpulse  Calories
# 0         60  '2020/12/01'    110       130     409.1
# 1         60  '2020/12/02'    117       145     479.0
# 2         60  '2020/12/03'    103       135     340.0
# 3         45  '2020/12/04'    109       175     282.4
# 4         45  '2020/12/05'    117       148     406.0
# 5         60  '2020/12/06'    102       127     300.0
# 6         60  '2020/12/07'    110       136     374.0
# 7        450  '2020/12/08'    104       134     253.3
# 8         30  '2020/12/09'    109       133     195.1
# 9         60  '2020/12/10'     98       124     269.0
# 10        60  '2020/12/11'    103       147     329.3
# 11        60  '2020/12/12'    100       120     250.7
# 12        60  '2020/12/12'    100       120     250.7
# 13        60  '2020/12/13'    106       128     345.3
# 14        60  '2020/12/14'    104       132     379.3
# 15        60  '2020/12/15'     98       123     275.0
# 16        60  '2020/12/16'     98       120     215.2
# 17        60  '2020/12/17'    100       120     300.0
# 18        45  '2020/12/18'     90       112     300.0
# 19        60  '2020/12/19'    103       123     323.0
# 20        45  '2020/12/20'     97       125     243.0
# 21        60  '2020/12/21'    108       131     364.2
# 22        45           NaN    100       119     282.0
# 23        60  '2020/12/23'    130       101     300.0
# 24        45  '2020/12/24'    105       132     246.0
# 25        60  '2020/12/25'    102       126     334.5
# 26        60      20201226    100       120     250.0
# 27        60  '2020/12/27'     92       118     241.0
# 28        60  '2020/12/28'    103       132     300.0
# 29        60  '2020/12/29'    100       132     280.0
# 30        60  '2020/12/30'    102       129     380.3
# 31        60  '2020/12/31'     92       115     243.0


#here not represent a index value of [0]

#hen it returns a NAN values

"""
import pandas as pd

df=pd.read_csv("C:/Users/admin/Downloads/datas/dirtydata.csv")
x=df["Calories"].mode()
df["Calories"].fillna(x,inplace=True)
print(df.to_string())
"""

# output


#     Duration          Date  Pulse  Maxpulse  Calories
# 0         60  '2020/12/01'    110       130     409.1
# 1         60  '2020/12/02'    117       145     479.0
# 2         60  '2020/12/03'    103       135     340.0
# 3         45  '2020/12/04'    109       175     282.4
# 4         45  '2020/12/05'    117       148     406.0
# 5         60  '2020/12/06'    102       127     300.0
# 6         60  '2020/12/07'    110       136     374.0
# 7        450  '2020/12/08'    104       134     253.3
# 8         30  '2020/12/09'    109       133     195.1
# 9         60  '2020/12/10'     98       124     269.0
# 10        60  '2020/12/11'    103       147     329.3
# 11        60  '2020/12/12'    100       120     250.7
# 12        60  '2020/12/12'    100       120     250.7
# 13        60  '2020/12/13'    106       128     345.3
# 14        60  '2020/12/14'    104       132     379.3
# 15        60  '2020/12/15'     98       123     275.0
# 16        60  '2020/12/16'     98       120     215.2
# 17        60  '2020/12/17'    100       120     300.0
# 18        45  '2020/12/18'     90       112       NaN
# 19        60  '2020/12/19'    103       123     323.0
# 20        45  '2020/12/20'     97       125     243.0
# 21        60  '2020/12/21'    108       131     364.2
# 22        45           NaN    100       119     282.0
# 23        60  '2020/12/23'    130       101     300.0
# 24        45  '2020/12/24'    105       132     246.0
# 25        60  '2020/12/25'    102       126     334.5
# 26        60      20201226    100       120     250.0
# 27        60  '2020/12/27'     92       118     241.0
# 28        60  '2020/12/28'    103       132       NaN
# 29        60  '2020/12/29'    100       132     280.0
# 30        60  '2020/12/30'    102       129     380.3
# 31        60  '2020/12/31'     92       115     243.0


#--------------------------------------------------------------------------




# cleaning wrong fromat

# to change the date into correct format:
    
"""    
import pandas as pd
df=pd.read_csv("C:/Users/admin/Downloads/datas/dirtydata.csv")
df["Date"] = pd.to_datetime(df["Date"])
print(df)
"""

# output

# Duration       Date  Pulse  Maxpulse  Calories
# 0         60 2020-12-01    110       130     409.1
# 1         60 2020-12-02    117       145     479.0
# 2         60 2020-12-03    103       135     340.0
# 3         45 2020-12-04    109       175     282.4
# 4         45 2020-12-05    117       148     406.0
# 5         60 2020-12-06    102       127     300.0
# 6         60 2020-12-07    110       136     374.0
# 7        450 2020-12-08    104       134     253.3
# 8         30 2020-12-09    109       133     195.1
# 9         60 2020-12-10     98       124     269.0
# 10        60 2020-12-11    103       147     329.3
# 11        60 2020-12-12    100       120     250.7
# 12        60 2020-12-12    100       120     250.7
# 13        60 2020-12-13    106       128     345.3
# 14        60 2020-12-14    104       132     379.3
# 15        60 2020-12-15     98       123     275.0
# 16        60 2020-12-16     98       120     215.2
# 17        60 2020-12-17    100       120     300.0
# 18        45 2020-12-18     90       112       NaN
# 19        60 2020-12-19    103       123     323.0
# 20        45 2020-12-20     97       125     243.0
# 21        60 2020-12-21    108       131     364.2
# 22        45        NaT    100       119     282.0
# 23        60 2020-12-23    130       101     300.0
# 24        45 2020-12-24    105       132     246.0
# 25        60 2020-12-25    102       126     334.5
# 26        60 2020-12-26    100       120     250.0
# 27        60 2020-12-27     92       118     241.0
# 28        60 2020-12-28    103       132       NaN
# 29        60 2020-12-29    100       132     280.0
# 30        60 2020-12-30    102       129     380.3
# 31        60 2020-12-31     92       115     243.0



# to remove a date  particular space only
 

"""
import pandas as pd
df=pd.read_csv("C:/Users/admin/Downloads/datas/dirtydata.csv")
df["Date"] = pd.to_datetime(df["Date"])
df.dropna(subset=["Date"],inplace=True)
print(df) 
"""



# output

#     Duration       Date  Pulse  Maxpulse  Calories
# 0         60 2020-12-01    110       130     409.1
# 1         60 2020-12-02    117       145     479.0
# 2         60 2020-12-03    103       135     340.0
# 3         45 2020-12-04    109       175     282.4
# 4         45 2020-12-05    117       148     406.0
# 5         60 2020-12-06    102       127     300.0
# 6         60 2020-12-07    110       136     374.0
# 7        450 2020-12-08    104       134     253.3
# 8         30 2020-12-09    109       133     195.1
# 9         60 2020-12-10     98       124     269.0
# 10        60 2020-12-11    103       147     329.3
# 11        60 2020-12-12    100       120     250.7
# 12        60 2020-12-12    100       120     250.7
# 13        60 2020-12-13    106       128     345.3
# 14        60 2020-12-14    104       132     379.3
# 15        60 2020-12-15     98       123     275.0
# 16        60 2020-12-16     98       120     215.2
# 17        60 2020-12-17    100       120     300.0
# 18        45 2020-12-18     90       112       NaN
# 19        60 2020-12-19    103       123     323.0
# 20        45 2020-12-20     97       125     243.0
# 21        60 2020-12-21    108       131     364.2
# 23        60 2020-12-23    130       101     300.0
# 24        45 2020-12-24    105       132     246.0
# 25        60 2020-12-25    102       126     334.5
# 26        60 2020-12-26    100       120     250.0
# 27        60 2020-12-27     92       118     241.0
# 28        60 2020-12-28    103       132       NaN
# 29        60 2020-12-29    100       132     280.0
# 30        60 2020-12-30    102       129     380.3
# 31        60 2020-12-31     92       115     243.0



# to change the duration value ... using loc()


"""
import pandas as pd
df=pd.read_csv("C:/Users/admin/Downloads/datas/dirtydata.csv")
df.loc[7,"Duration"]=120
print(df.to_string())
"""

# output

# here change duration value of 7th position

#     Duration          Date  Pulse  Maxpulse  Calories
# 0         60  '2020/12/01'    110       130     409.1
# 1         60  '2020/12/02'    117       145     479.0
# 2         60  '2020/12/03'    103       135     340.0
# 3         45  '2020/12/04'    109       175     282.4
# 4         45  '2020/12/05'    117       148     406.0
# 5         60  '2020/12/06'    102       127     300.0
# 6         60  '2020/12/07'    110       136     374.0
# 7        120  '2020/12/08'    104       134     253.3
# 8         30  '2020/12/09'    109       133     195.1
# 9         60  '2020/12/10'     98       124     269.0
# 10        60  '2020/12/11'    103       147     329.3
# 11        60  '2020/12/12'    100       120     250.7
# 12        60  '2020/12/12'    100       120     250.7
# 13        60  '2020/12/13'    106       128     345.3
# 14        60  '2020/12/14'    104       132     379.3
# 15        60  '2020/12/15'     98       123     275.0
# 16        60  '2020/12/16'     98       120     215.2
# 17        60  '2020/12/17'    100       120     300.0
# 18        45  '2020/12/18'     90       112       NaN
# 19        60  '2020/12/19'    103       123     323.0
# 20        45  '2020/12/20'     97       125     243.0
# 21        60  '2020/12/21'    108       131     364.2
# 22        45           NaN    100       119     282.0
# 23        60  '2020/12/23'    130       101     300.0
# 24        45  '2020/12/24'    105       132     246.0
# 25        60  '2020/12/25'    102       126     334.5
# 26        60      20201226    100       120     250.0
# 27        60  '2020/12/27'     92       118     241.0
# 28        60  '2020/12/28'    103       132       NaN
# 29        60  '2020/12/29'    100       132     280.0
# 30        60  '2020/12/30'    102       129     380.3
# 31        60  '2020/12/31'     92       115     243.0



# here using index 

# this index values represents the index position of the csv file

# here extra form of a duration calumn


"""
import pandas as pd
df=pd.read_csv("C:/Users/admin/Downloads/datas/dirtydata.csv")
for x in df.index:
    if df.loc[x,"Duration"] > 120:
        df.loc[x,"Duration"] =120
print(df)
"""  
      

# output

#     Duration          Date  Pulse  Maxpulse  Calories
# 0         60  '2020/12/01'    110       130     409.1
# 1         60  '2020/12/02'    117       145     479.0
# 2         60  '2020/12/03'    103       135     340.0
# 3         45  '2020/12/04'    109       175     282.4
# 4         45  '2020/12/05'    117       148     406.0
# 5         60  '2020/12/06'    102       127     300.0
# 6         60  '2020/12/07'    110       136     374.0
# 7        120  '2020/12/08'    104       134     253.3
# 8         30  '2020/12/09'    109       133     195.1
# 9         60  '2020/12/10'     98       124     269.0
# 10        60  '2020/12/11'    103       147     329.3
# 11        60  '2020/12/12'    100       120     250.7
# 12        60  '2020/12/12'    100       120     250.7
# 13        60  '2020/12/13'    106       128     345.3
# 14        60  '2020/12/14'    104       132     379.3
# 15        60  '2020/12/15'     98       123     275.0
# 16        60  '2020/12/16'     98       120     215.2
# 17        60  '2020/12/17'    100       120     300.0
# 18        45  '2020/12/18'     90       112       NaN
# 19        60  '2020/12/19'    103       123     323.0
# 20        45  '2020/12/20'     97       125     243.0
# 21        60  '2020/12/21'    108       131     364.2
# 22        45           NaN    100       119     282.0
# 23        60  '2020/12/23'    130       101     300.0
# 24        45  '2020/12/24'    105       132     246.0
# 25        60  '2020/12/25'    102       126     334.5
# 26        60      20201226    100       120     250.0
# 27        60  '2020/12/27'     92       118     241.0
# 28        60  '2020/12/28'    103       132       NaN
# 29        60  '2020/12/29'    100       132     280.0
# 30        60  '2020/12/30'    102       129     380.3
# 31        60  '2020/12/31'     92       115     243.0


#--------------------------------------------------------------------------


# using drop()

# dropna() ----> when using a varible

# drop() ---> when using a loop 

# here >120 then deleted that particular value


"""
import pandas as pd
df=pd.read_csv("C:/Users/admin/Downloads/datas/dirtydata.csv")
for x in df.index:
    if df.loc[x,"Duration"] > 120:
        df.drop(x,inplace=True)
print(df)
"""

# output

#     Duration          Date  Pulse  Maxpulse  Calories
# 0         60  '2020/12/01'    110       130     409.1
# 1         60  '2020/12/02'    117       145     479.0
# 2         60  '2020/12/03'    103       135     340.0
# 3         45  '2020/12/04'    109       175     282.4
# 4         45  '2020/12/05'    117       148     406.0
# 5         60  '2020/12/06'    102       127     300.0
# 6         60  '2020/12/07'    110       136     374.0
# 8         30  '2020/12/09'    109       133     195.1
# 9         60  '2020/12/10'     98       124     269.0
# 10        60  '2020/12/11'    103       147     329.3
# 11        60  '2020/12/12'    100       120     250.7
# 12        60  '2020/12/12'    100       120     250.7
# 13        60  '2020/12/13'    106       128     345.3
# 14        60  '2020/12/14'    104       132     379.3
# 15        60  '2020/12/15'     98       123     275.0
# 16        60  '2020/12/16'     98       120     215.2
# 17        60  '2020/12/17'    100       120     300.0
# 18        45  '2020/12/18'     90       112       NaN
# 19        60  '2020/12/19'    103       123     323.0
# 20        45  '2020/12/20'     97       125     243.0
# 21        60  '2020/12/21'    108       131     364.2
# 22        45           NaN    100       119     282.0
# 23        60  '2020/12/23'    130       101     300.0
# 24        45  '2020/12/24'    105       132     246.0
# 25        60  '2020/12/25'    102       126     334.5
# 26        60      20201226    100       120     250.0
# 27        60  '2020/12/27'     92       118     241.0
# 28        60  '2020/12/28'    103       132       NaN
# 29        60  '2020/12/29'    100       132     280.0
# 30        60  '2020/12/30'    102       129     380.3
# 31        60  '2020/12/31'     92       115     243.0


#----------------------------------------------------------------------------


# Removing a duplicated data using pandas | data cleaning


# removing a duplicate data


# duplicated()  --> this function to find a duplicate data into the from of bool value 


# here it returns a boolean values

"""
import pandas as pd
df=pd.read_csv("C:/Users/admin/Downloads/datas/dirtydata.csv")
x=df.duplicated()
print(x)
"""

# output

# here 12 th record is duplicate. because it returns true

# 0     False
# 1     False
# 2     False
# 3     False
# 4     False
# 5     False
# 6     False
# 7     False
# 8     False
# 9     False
# 10    False
# 11    False
# 12     True
# 13    False
# 14    False
# 15    False
# 16    False
# 17    False
# 18    False
# 19    False
# 20    False
# 21    False
# 22    False
# 23    False
# 24    False
# 25    False
# 26    False
# 27    False
# 28    False
# 29    False
# 30    False
# 31    False
# dtype: bool


# to remove a duplicate data

# drop_duplicates() 

"""
import pandas as pd
df=pd.read_csv("C:/Users/admin/Downloads/datas/dirtydata.csv")
x=df.drop_duplicates(inplace=True)
print(df)
"""


# output

#     Duration          Date  Pulse  Maxpulse  Calories
# 0         60  '2020/12/01'    110       130     409.1
# 1         60  '2020/12/02'    117       145     479.0
# 2         60  '2020/12/03'    103       135     340.0
# 3         45  '2020/12/04'    109       175     282.4
# 4         45  '2020/12/05'    117       148     406.0
# 5         60  '2020/12/06'    102       127     300.0
# 6         60  '2020/12/07'    110       136     374.0
# 7        450  '2020/12/08'    104       134     253.3
# 8         30  '2020/12/09'    109       133     195.1
# 9         60  '2020/12/10'     98       124     269.0
# 10        60  '2020/12/11'    103       147     329.3
# 11        60  '2020/12/12'    100       120     250.7
# 13        60  '2020/12/13'    106       128     345.3
# 14        60  '2020/12/14'    104       132     379.3
# 15        60  '2020/12/15'     98       123     275.0
# 16        60  '2020/12/16'     98       120     215.2
# 17        60  '2020/12/17'    100       120     300.0
# 18        45  '2020/12/18'     90       112       NaN
# 19        60  '2020/12/19'    103       123     323.0
# 20        45  '2020/12/20'     97       125     243.0
# 21        60  '2020/12/21'    108       131     364.2
# 22        45           NaN    100       119     282.0
# 23        60  '2020/12/23'    130       101     300.0
# 24        45  '2020/12/24'    105       132     246.0
# 25        60  '2020/12/25'    102       126     334.5
# 26        60      20201226    100       120     250.0
# 27        60  '2020/12/27'     92       118     241.0
# 28        60  '2020/12/28'    103       132       NaN
# 29        60  '2020/12/29'    100       132     280.0
# 30        60  '2020/12/30'    102       129     380.3
# 31        60  '2020/12/31'     92       115     243.0



# inplace=True  ---->  to change the original(already ) file

# otherwise it doesn't apply



#--------------------------data cleaning finished----------------------------



# how to save cleaned files in csv and json 

# to fill the empty data into 2500

"""
import pandas as pd

df=pd.read_csv("C:/Users/admin/Downloads/datas/dirtydata.csv")
df.fillna(2500,inplace=True)
print(df)
"""

# output

#     Duration          Date  Pulse  Maxpulse  Calories
# 0         60  '2020/12/01'    110       130     409.1
# 1         60  '2020/12/02'    117       145     479.0
# 2         60  '2020/12/03'    103       135     340.0
# 3         45  '2020/12/04'    109       175     282.4
# 4         45  '2020/12/05'    117       148     406.0
# 5         60  '2020/12/06'    102       127     300.0
# 6         60  '2020/12/07'    110       136     374.0
# 7        450  '2020/12/08'    104       134     253.3
# 8         30  '2020/12/09'    109       133     195.1
# 9         60  '2020/12/10'     98       124     269.0
# 10        60  '2020/12/11'    103       147     329.3
# 11        60  '2020/12/12'    100       120     250.7
# 12        60  '2020/12/12'    100       120     250.7
# 13        60  '2020/12/13'    106       128     345.3
# 14        60  '2020/12/14'    104       132     379.3
# 15        60  '2020/12/15'     98       123     275.0
# 16        60  '2020/12/16'     98       120     215.2
# 17        60  '2020/12/17'    100       120     300.0
# 18        45  '2020/12/18'     90       112    2500.0
# 19        60  '2020/12/19'    103       123     323.0
# 20        45  '2020/12/20'     97       125     243.0
# 21        60  '2020/12/21'    108       131     364.2
# 22        45          2500    100       119     282.0
# 23        60  '2020/12/23'    130       101     300.0
# 24        45  '2020/12/24'    105       132     246.0
# 25        60  '2020/12/25'    102       126     334.5
# 26        60      20201226    100       120     250.0
# 27        60  '2020/12/27'     92       118     241.0
# 28        60  '2020/12/28'    103       132    2500.0
# 29        60  '2020/12/29'    100       132     280.0
# 30        60  '2020/12/30'    102       129     380.3
# 31        60  '2020/12/31'     92       115     243.0


# how to save?

# here our file has saved to the name of file.csv

"""
import pandas as pd

df=pd.read_csv("C:/Users/admin/Downloads/datas/dirtydata.csv")
df.fillna(2500,inplace=True)
print(df)
 
df.to_csv("file.csv")
"""


# output

# the file.csv file was created.


# ,Duration,Date,Pulse,Maxpulse,Calories
# 0,60,'2020/12/01',110,130,409.1
# 1,60,'2020/12/02',117,145,479.0
# 2,60,'2020/12/03',103,135,340.0
# 3,45,'2020/12/04',109,175,282.4
# 4,45,'2020/12/05',117,148,406.0
# 5,60,'2020/12/06',102,127,300.0
# 6,60,'2020/12/07',110,136,374.0
# 7,450,'2020/12/08',104,134,253.3
# 8,30,'2020/12/09',109,133,195.1
# 9,60,'2020/12/10',98,124,269.0
# 10,60,'2020/12/11',103,147,329.3
# 11,60,'2020/12/12',100,120,250.7
# 12,60,'2020/12/12',100,120,250.7
# 13,60,'2020/12/13',106,128,345.3
# 14,60,'2020/12/14',104,132,379.3
# 15,60,'2020/12/15',98,123,275.0
# 16,60,'2020/12/16',98,120,215.2
# 17,60,'2020/12/17',100,120,300.0
# 18,45,'2020/12/18',90,112,2500.0
# 19,60,'2020/12/19',103,123,323.0
# 20,45,'2020/12/20',97,125,243.0
# 21,60,'2020/12/21',108,131,364.2
# 22,45,2500,100,119,282.0
# 23,60,'2020/12/23',130,101,300.0
# 24,45,'2020/12/24',105,132,246.0
# 25,60,'2020/12/25',102,126,334.5
# 26,60,20201226,100,120,250.0
# 27,60,'2020/12/27',92,118,241.0
# 28,60,'2020/12/28',103,132,2500.0
# 29,60,'2020/12/29',100,132,280.0
# 30,60,'2020/12/30',102,129,380.3
# 31,60,'2020/12/31',92,115,243.0



"""
import pandas as pd

df=pd.read_csv("C:/Users/admin/Downloads/datas/dirtydata.csv")
df.fillna(1000000000,inplace=True)
print(df)
 
df.to_csv("file.csv")
"""

# the file.csv file is modified here.

# output

# ,Duration,Date,Pulse,Maxpulse,Calories
# 0,60,'2020/12/01',110,130,409.1
# 1,60,'2020/12/02',117,145,479.0
# 2,60,'2020/12/03',103,135,340.0
# 3,45,'2020/12/04',109,175,282.4
# 4,45,'2020/12/05',117,148,406.0
# 5,60,'2020/12/06',102,127,300.0
# 6,60,'2020/12/07',110,136,374.0
# 7,450,'2020/12/08',104,134,253.3
# 8,30,'2020/12/09',109,133,195.1
# 9,60,'2020/12/10',98,124,269.0
# 10,60,'2020/12/11',103,147,329.3
# 11,60,'2020/12/12',100,120,250.7
# 12,60,'2020/12/12',100,120,250.7
# 13,60,'2020/12/13',106,128,345.3
# 14,60,'2020/12/14',104,132,379.3
# 15,60,'2020/12/15',98,123,275.0
# 16,60,'2020/12/16',98,120,215.2
# 17,60,'2020/12/17',100,120,300.0
# 18,45,'2020/12/18',90,112,1000000000.0
# 19,60,'2020/12/19',103,123,323.0
# 20,45,'2020/12/20',97,125,243.0
# 21,60,'2020/12/21',108,131,364.2
# 22,45,1000000000,100,119,282.0
# 23,60,'2020/12/23',130,101,300.0
# 24,45,'2020/12/24',105,132,246.0
# 25,60,'2020/12/25',102,126,334.5
# 26,60,20201226,100,120,250.0
# 27,60,'2020/12/27',92,118,241.0
# 28,60,'2020/12/28',103,132,1000000000.0
# 29,60,'2020/12/29',100,132,280.0
# 30,60,'2020/12/30',102,129,380.3
# 31,60,'2020/12/31',92,115,243.0


#-----------------------------------------------------------------------------

# also created a josn file.

# JSON --> JavaScript Object Notation

"""
import pandas as pd

df=pd.read_csv("C:/Users/admin/Downloads/datas/dirtydata.csv")
df.fillna(999999999,inplace=True)
print(df)
 
df.to_json("file.json")
"""

# output

# here save a file name has file.json

# {"Duration":{"0":60,"1":60,"2":60,"3":45,"4":45,"5":60,"6":60,"7":450,"8":30,"9":60,
#              "10":60,"11":60,"12":60,"13":60,"14":60,"15":60,"16":60,"17":60,"18":45,
#              "19":60,"20":45,"21":60,"22":45,"23":60,"24":45,"25":60,"26":60,
#              "27":60,"28":60,"29":60,"30":60,"31":60},"Date":{"0":"'2020\/12\/01'",
#  "1":"'2020\/12\/02'","2":"'2020\/12\/03'","3":"'2020\/12\/04'","4":"'2020\/12\/05'",
#  "5":"'2020\/12\/06'","6":"'2020\/12\/07'","7":"'2020\/12\/08'","8":"'2020\/12\/09'",
#  "9":"'2020\/12\/10'","10":"'2020\/12\/11'","11":"'2020\/12\/12'","12":"'2020\/12\/12'",
#  "13":"'2020\/12\/13'","14":"'2020\/12\/14'","15":"'2020\/12\/15'","16":"'2020\/12\/16'",
#  "17":"'2020\/12\/17'","18":"'2020\/12\/18'","19":"'2020\/12\/19'","20":"'2020\/12\/20'",
#  "21":"'2020\/12\/21'","22":999999999,"23":"'2020\/12\/23'","24":"'2020\/12\/24'",
#  "25":"'2020\/12\/25'","26":"20201226","27":"'2020\/12\/27'","28":"'2020\/12\/28'",
#  "29":"'2020\/12\/29'","30":"'2020\/12\/30'","31":"'2020\/12\/31'"},
#  "Pulse":{"0":110,"1":117,"2":103,"3":109,"4":117,"5":102,"6":110,"7":104,"8":109,"9":98,
#           "10":103,"11":100,"12":100,"13":106,"14":104,"15":98,"16":98,"17":100,"18":90,
#           "19":103,"20":97,"21":108,"22":100,"23":130,"24":105,"25":102,"26":100,"27":92,
#           "28":103,"29":100,"30":102,"31":92},"Maxpulse":{"0":130,"1":145,"2":135,"3":175,
#         "4":148,"5":127,"6":136,"7":134,"8":133,"9":124,"10":147,"11":120,"12":120,
#         "13":128,"14":132,"15":123,"16":120,"17":120,"18":112,"19":123,"20":125,
#         "21":131,"22":119,"23":101,"24":132,"25":126,"26":120,"27":118,"28":132,
#         "29":132,"30":129,"31":115},"Calories":{"0":409.1,"1":479.0,"2":340.0,"3":282.4,
#         "4":406.0,"5":300.0,"6":374.0,"7":253.3,"8":195.1,"9":269.0,"10":329.3,"11":250.7,
#         "12":250.7,"13":345.3,"14":379.3,"15":275.0,"16":215.2,"17":300.0,"18":999999999.0,
#         "19":323.0,"20":243.0,"21":364.2,"22":282.0,"23":300.0,"24":246.0,"25":334.5,
#         "26":250.0,"27":241.0,"28":999999999.0,"29":280.0,"30":380.3,"31":243.0}}



#------------------------------------------------------------------------------------------


# ********************************important***************************************************


# what is data correlation in pandas  | data cleaning


# data correlation --> corr()

# -1 to +1 

# -1 ---> not perfect data (bad correlation)

# +1 ---> 100% perfect data   (very very good correlation)

# 0.5 - 0.9 --- perfect data  (50% good correlation)

# to calculate the relationship of each datas

"""
import pandas as pd
df = pd.read_csv("C:/Users/admin/Downloads/datas/dirtydata.csv")
print(df.corr())
"""

# output

#          Duration     Pulse  Maxpulse  Calories
# Duration  1.000000  0.004410  0.049959 -0.114169
# Pulse     0.004410  1.000000  0.276583  0.513186
# Maxpulse  0.049959  0.276583  1.000000  0.357460
# Calories -0.114169  0.513186  0.357460  1.000000



# now here -(negatives) values are a not perfect data

# so here we change the data negative (-) into positive (+)


# so we change datas to postive value only

#----------------------------------------------------------------------------------


#---------------------------------****************************-----------------------


# view cleaned data in graphical interface using matplotlib library

# plotting (pie,bar,scatter charts etc.,)

# plot()  ----> function


import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv("C:/Users/admin/Downloads/datas/dirtydata.csv")
df.plot()
plt.show()


#--------------------------------completed---------------------------------------------